
using System;

namespace GXPEngine
{
	internal class ArrayLevel : GameObject
	{
		private const int PLAYER = 1;
		private const int TRIANGLE = 2;
		private const int TRIANGLE2 = 3;
		private const int TRIANGLE3 = 4;
		private const int TRIANGLE4 = 5;
		private const int SQUARE = 6;

		private readonly int[,,] levels =
		{
			//level 1 (index = 0)
			{                                                           //middle
				{6, 2, 0, 0, 0, 0, 0, 5, 6, 6, 6, 6, 6, 4, 0, 0, 0, 0, 0, 5, 4, 0, 0, 0, 0, 0, 5, 6, 6, 6, 6, 6, 4, 0, 0, 0, 0, 0, 3, 6,},
				{6, 5, 2, 0, 0, 0, 0, 0, 5, 6, 6, 6, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 6, 6, 4, 0, 0, 0, 0, 0, 3, 4, 6,},
				{6, 0, 5, 2, 0, 0, 0, 0, 0, 5, 6, 4, 0, 0, 0, 0, 0, 3, 6, 0, 0, 6, 2, 0, 0, 0, 0, 0, 5, 6, 4, 0, 0, 0, 0, 0, 3, 4, 0, 6,},
				{6, 0, 0, 5, 2, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 3, 6, 6, 0, 0, 6, 6, 2, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 3, 4, 0, 0, 6,},
				{6, 0, 0, 0, 6, 0, 0, 0, 0, 3, 6, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 0, 0, 0, 0, 0, 3, 6, 2, 0, 0, 0, 0, 6, 0, 0, 0, 6,},
				{6, 0, 0, 3, 4, 0, 0, 0, 3, 4, 0, 5, 2, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 0, 0, 0, 0, 3, 4, 0, 5, 2, 0, 0, 0, 5, 2, 0, 0, 6,},
				{6, 0, 3, 4, 0, 0, 0, 3, 4, 0, 0, 0, 5, 2, 0, 0, 0, 0, 6, 0, 0, 6, 0, 0, 0, 0, 3, 4, 0, 0, 0, 5, 2, 0, 0, 0, 5, 2, 0, 6,},
				{6, 3, 4, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 4, 0, 0, 5, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 5, 2, 6,},
				{6, 4, 0, 0, 0, 0, 0, 5, 2, 0, 0, 0, 3, 4, 0, 0, 0, 4, 0, 3, 2, 0, 5, 0, 0, 0, 5, 2, 0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 5, 6,},
				{6, 0, 0, 3, 2, 0, 0, 0, 5, 2, 0, 3, 4, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 5, 2, 0, 3, 4, 0, 0, 0, 3, 2, 0, 0, 6,},
				{6, 0, 0, 6, 6, 0, 0, 0, 0, 5, 6, 4, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 0, 0, 0, 0, 0, 5, 6, 4, 0, 0, 0, 0, 6, 6, 0, 0, 6,},
				{6, 0, 0, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 6,},
				{6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 0, 0, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6,},
				{6, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 6, 0, 0, 6, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 6,},
				{6, 0, 5, 2, 0, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 3, 4, 0, 6,},
				{6, 0, 0, 5, 2, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 3, 4, 0, 0, 6,},
				{6, 0, 0, 0, 6, 0, 0, 0, 0, 5, 6, 4, 0, 0, 0, 0, 0, 0, 6, 0, 0, 6, 0, 0, 0, 0, 0, 0, 5, 6, 4, 0, 0, 0, 0, 6, 0, 0, 0, 6,},
				{6, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0, 0, 6,},
				{6, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 2, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0, 6,},
				{6, 3, 4, 0, 0, 3, 2, 3, 2, 0, 0, 3, 2, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 3, 2, 3, 2, 0, 0, 5, 2, 6,},
				{6, 6, 6, 0, 0, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 2, 0, 5, 4, 0, 3, 6, 6, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 0, 0, 6, 6, 6,},
				{4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5,},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
				{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
			},
		};

		//initializing all the objects in the level
		public ArrayLevel(int index)
		{
			const int tileSize = 30;
			for (int rows = 0; rows < levels.GetLength(1); rows++)
			for (int cols = 0; cols < levels.GetLength(2); cols++)
			{
				int tileType = levels[index, rows, cols];
				MyGame myGame = (MyGame) game;
				switch (tileType)
				{
					case PLAYER:
						Shooter player = new Shooter
						{
							// x = cols * tileSize,
							// y = rows * tileSize,
						};
						AddChild(player);
						break;

					case TRIANGLE:
						Triangle triangle = new (cols * tileSize, rows * tileSize,0);
						
						AddChild(triangle);
						myGame.triangles.Add(triangle);
						break;
					case TRIANGLE2:
						Triangle triangle2 = new (cols * tileSize, rows * tileSize,1);
						
						AddChild(triangle2);
						myGame.triangles.Add(triangle2);
						break;
					case TRIANGLE3:
						Triangle triangle3 = new (cols * tileSize, rows * tileSize,2);
						
						AddChild(triangle3);
						myGame.triangles.Add(triangle3);
						break;
					case TRIANGLE4:
						Triangle triangle4 = new (cols * tileSize, rows * tileSize,3);
						
						AddChild(triangle4);
						myGame.triangles.Add(triangle4);
						break;
					case SQUARE:
						Triangle square = new (cols * tileSize, rows * tileSize,4);
						
						AddChild(square);
						myGame.triangles.Add(square);
						break;
				}
			}
		}
	}
}
